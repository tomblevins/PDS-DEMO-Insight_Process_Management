<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes>45cf8914eb320110f7e105a3a25228ab</includes>
        <macroponent display_value="DA Modal Ref Tree Lookup">1f2f8a051bec71500f0eda43cc4bcbb9</macroponent>
        <name>Expand item on Load</name>
        <preset/>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
function handler({ api, event, helpers, imports }) {
	const { parseGroupTree, parseGeneralTree, addNewChild } =
		imports['global.Content Tree Utils']();
	const {
		props: { table, referenceTable, referenceField, dependentField }
	} = api.context;
	let nameSuffix = 'parent';
	let type = 'child';
	const name = `${referenceTable}.${nameSuffix}`;
	const {
		treePickerConfig: { processor, targetPath = '', targetValue, queryString },
		domainID
	} = api.data.tree_picker.treePicker;
	const reference = `${table}.${referenceField}`;
	const target =
		dependentField === ''
			? `${referenceTable}.undefined`
			: `${referenceTable}.${dependentField}`;

	const generateTargetPath = (index, targetPath) => {
		const path = [];
		for (let i = 0; i <= index; i++) path.push(targetPath[i]);
		return path;
	};

	function finalResponse({ api, response, targetPath, currentIndex }) {
		const xml = Object.values(response).join('');
		const treeJSON =
			referenceTable === 'sys_user_group'
				? parseGroupTree(xml)
				: parseGeneralTree(xml);
		const newTreeJSON = addNewChild(
			api.state.treeItems[0],
			generateTargetPath(currentIndex, targetPath),
			treeJSON
		);
		api.setState('loadingItems', []);
		api.setState('treeItems', [newTreeJSON]);
		api.setState('selectedItems', [targetPath]);
	}

	function getHttpPromise({
		api,
		helpers,
		targetPath,
		currentIndex,
		response
	}) {
		if (response) {
			const xml = Object.values(response).join('');
			const treeJSON =
				referenceTable === 'sys_user_group'
					? parseGroupTree(xml)
					: parseGeneralTree(xml);
			const newTreeJSON = addNewChild(
				api.state.treeItems[0],
				generateTargetPath(currentIndex - 1, targetPath),
				treeJSON
			);
			api.setState('treeItems', [newTreeJSON]);
		}
		api.setState('expandedItems', ({ api }) => [
			...api.state.expandedItems,
			generateTargetPath(currentIndex, targetPath)
		]);
		api.setState('loadingItems', [
			{
				path: generateTargetPath(currentIndex, targetPath),
				error: false
			}
		]);

		const params = {
		    sysparm_processor: processor,
		    method: 'getTreeNodes',
		    sysparm_name: name,
		    sysparm_type: type,
		    sysparm_chars: chars,
		    sysparm_reference: reference,
		    sysparm_target: target,
		    sysparm_dependent_value: targetValue,
		    sysparm_domain: domainID,
		    sysparm_query: queryString || undefined
		};
		helpers
			.snHttp(
				'/xmlhttp.do',
				{
					method: 'POST',
					batch: false,
					body: {},
					params: params,
					headers: {
						'X-WantSessionNotificationMessages': 'true',
						'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
					}
				}
			)
			.then(({ response }) => {
				const newIndex = currentIndex + 1;
				if (newIndex === targetPath.length)
					finalResponse({
						api,
						response,
						targetPath,
						currentIndex
					});
				else
					getHttpPromise({
						api,
						helpers,
						targetPath,
						currentIndex: newIndex,
						response
					});
			});
	}

	let value = [[]];
	if (targetPath) {
		value = targetPath.split(';').reduce((target, source) => {
			target.push(source.split(','));
			return target;
		}, []);
	}
	getHttpPromise({
		api,
		helpers,
		targetPath: value[0],
		currentIndex: 0
	});
}
]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>TBlev1</sys_created_by>
        <sys_created_on>2023-08-07 17:47:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>493f4e051bec71500f0eda43cc4bcb54</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Expand item on Load</sys_name>
        <sys_package display_value="Insight Process Management" source="x_snc_insight_pr_0">39bd5e9747f05510ab51f109536d431c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Insight Process Management">39bd5e9747f05510ab51f109536d431c</sys_scope>
        <sys_update_name>sys_ux_client_script_493f4e051bec71500f0eda43cc4bcb54</sys_update_name>
        <sys_updated_by>TBlev1</sys_updated_by>
        <sys_updated_on>2023-08-07 17:47:31</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
